// Code generated by entc, DO NOT EDIT.

package ent

import (
	"go-basic-gqlgen/ent/schema/ulid"
	"time"
)

// CreateEmployeeInput represents a mutation input for creating employees.
type CreateEmployeeInput struct {
	FirstName string
	LastName  string
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// Mutate applies the CreateEmployeeInput on the EmployeeCreate builder.
func (i *CreateEmployeeInput) Mutate(m *EmployeeCreate) {
	m.SetFirstName(i.FirstName)
	m.SetLastName(i.LastName)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateEmployeeInput on the create builder.
func (c *EmployeeCreate) SetInput(i CreateEmployeeInput) *EmployeeCreate {
	i.Mutate(c)
	return c
}

// UpdateEmployeeInput represents a mutation input for updating employees.
type UpdateEmployeeInput struct {
	ID        ulid.ID
	FirstName *string
	LastName  *string
	UpdatedAt *time.Time
}

// Mutate applies the UpdateEmployeeInput on the EmployeeMutation.
func (i *UpdateEmployeeInput) Mutate(m *EmployeeMutation) {
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateEmployeeInput on the update builder.
func (u *EmployeeUpdate) SetInput(i UpdateEmployeeInput) *EmployeeUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateEmployeeInput on the update-one builder.
func (u *EmployeeUpdateOne) SetInput(i UpdateEmployeeInput) *EmployeeUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
