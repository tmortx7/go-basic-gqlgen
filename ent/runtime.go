// Code generated by entc, DO NOT EDIT.

package ent

import (
	"go-basic-gqlgen/ent/employee"
	"go-basic-gqlgen/ent/group"
	"go-basic-gqlgen/ent/link"
	"go-basic-gqlgen/ent/schema"
	"go-basic-gqlgen/ent/schema/ulid"
	"go-basic-gqlgen/ent/todo"
	"go-basic-gqlgen/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	employeeFields := schema.Employee{}.Fields()
	_ = employeeFields
	// employeeDescCreatedAt is the schema descriptor for created_at field.
	employeeDescCreatedAt := employeeFields[3].Descriptor()
	// employee.DefaultCreatedAt holds the default value on creation for the created_at field.
	employee.DefaultCreatedAt = employeeDescCreatedAt.Default.(time.Time)
	// employeeDescUpdatedAt is the schema descriptor for updated_at field.
	employeeDescUpdatedAt := employeeFields[4].Descriptor()
	// employee.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	employee.DefaultUpdatedAt = employeeDescUpdatedAt.Default.(time.Time)
	// employeeDescID is the schema descriptor for id field.
	employeeDescID := employeeFields[0].Descriptor()
	// employee.DefaultID holds the default value on creation for the id field.
	employee.DefaultID = employeeDescID.Default.(func() ulid.ID)
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupFields[1].Descriptor()
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = groupDescName.Validators[0].(func(string) error)
	// groupDescID is the schema descriptor for id field.
	groupDescID := groupFields[0].Descriptor()
	// group.DefaultID holds the default value on creation for the id field.
	group.DefaultID = groupDescID.Default.(func() ulid.ID)
	linkFields := schema.Link{}.Fields()
	_ = linkFields
	// linkDescTitle is the schema descriptor for title field.
	linkDescTitle := linkFields[1].Descriptor()
	// link.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	link.TitleValidator = func() func(string) error {
		validators := linkDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// linkDescCreatedAt is the schema descriptor for created_at field.
	linkDescCreatedAt := linkFields[3].Descriptor()
	// link.DefaultCreatedAt holds the default value on creation for the created_at field.
	link.DefaultCreatedAt = linkDescCreatedAt.Default.(time.Time)
	// linkDescUpdatedAt is the schema descriptor for updated_at field.
	linkDescUpdatedAt := linkFields[4].Descriptor()
	// link.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	link.DefaultUpdatedAt = linkDescUpdatedAt.Default.(time.Time)
	// linkDescID is the schema descriptor for id field.
	linkDescID := linkFields[0].Descriptor()
	// link.DefaultID holds the default value on creation for the id field.
	link.DefaultID = linkDescID.Default.(func() ulid.ID)
	todoFields := schema.Todo{}.Fields()
	_ = todoFields
	// todoDescName is the schema descriptor for name field.
	todoDescName := todoFields[1].Descriptor()
	// todo.DefaultName holds the default value on creation for the name field.
	todo.DefaultName = todoDescName.Default.(string)
	// todoDescPriority is the schema descriptor for priority field.
	todoDescPriority := todoFields[3].Descriptor()
	// todo.DefaultPriority holds the default value on creation for the priority field.
	todo.DefaultPriority = todoDescPriority.Default.(int)
	// todoDescID is the schema descriptor for id field.
	todoDescID := todoFields[0].Descriptor()
	// todo.DefaultID holds the default value on creation for the id field.
	todo.DefaultID = todoDescID.Default.(func() ulid.ID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[3].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() ulid.ID)
}
