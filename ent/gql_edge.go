// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (gr *Group) Users(ctx context.Context) ([]*User, error) {
	result, err := gr.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QueryUsers().All(ctx)
	}
	return result, err
}

func (l *Link) User(ctx context.Context) (*User, error) {
	result, err := l.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Todo) User(ctx context.Context) (*User, error) {
	result, err := t.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Links(ctx context.Context) ([]*Link, error) {
	result, err := u.Edges.LinksOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryLinks().All(ctx)
	}
	return result, err
}

func (u *User) Groups(ctx context.Context) ([]*Group, error) {
	result, err := u.Edges.GroupsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryGroups().All(ctx)
	}
	return result, err
}

func (u *User) Followers(ctx context.Context) ([]*User, error) {
	result, err := u.Edges.FollowersOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryFollowers().All(ctx)
	}
	return result, err
}

func (u *User) Following(ctx context.Context) ([]*User, error) {
	result, err := u.Edges.FollowingOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryFollowing().All(ctx)
	}
	return result, err
}

func (u *User) Todos(ctx context.Context) ([]*Todo, error) {
	result, err := u.Edges.TodosOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryTodos().All(ctx)
	}
	return result, err
}
